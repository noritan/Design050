C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\CyFlash.lst) DB NOIP OT(5,SIZ
                    -E) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\CyFlash.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 3.30
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2012, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          
  25          /*******************************************************************************
  26          * Holds die temperature, updated by CySetTemp(). Used for flash writting.
  27          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  28          * The second byte is the magnitude.
  29          *******************************************************************************/
  30          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  31          
  32          #if(CYDEV_ECC_ENABLE == 0)
  33              static uint8 * rowBuffer = 0;
  34          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  35          
  36          
  37          static cystatus CySetTempInt(void);
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: CyFlash_Start
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Enable the EEPROM/Flash.
  46          *
  47          *  Note: For PSoC 5, this will enable both Flash and EEPROM. For PSoC 3 and
  48          *  PSOC 5LP  this will enable only Flash.
  49          *
  50          * Parameters:
  51          *  None
  52          *
  53          * Return:
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 2   

  54          *  None
  55          *
  56          *******************************************************************************/
  57          void CyFlash_Start(void) 
  58          {
  59   1          #if(CY_PSOC5A)
              
                      /* Active Power Mode */
                      *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_EE_MASK;
              
                      /* Standby Power Mode */
                      *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_EE_MASK;
              
                  #endif  /* (CY_PSOC5A) */
  68   1      
  69   1          #if(CY_PSOC3 || CY_PSOC5LP)
  70   1      
  71   1              /* Active Power Mode */
  72   1              *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  73   1      
  74   1              /* Standby Power Mode */
  75   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  76   1      
  77   1          #endif  /* (CY_PSOC3 || CY_PSOC5LP) */
  78   1      
  79   1          CyDelayUs(CY_FLASH_EE_STARTUP_DELAY);
  80   1      }
  81          
  82          
  83          /*******************************************************************************
  84          * Function Name: CyFlash_Stop
  85          ********************************************************************************
  86          *
  87          * Summary:
  88          *  Disable the EEPROM/Flash.
  89          *
  90          *  Note:
  91          *  PSoC 5: disable both Flash and EEPROM.
  92          *  PSoC 3 and PSOC 5LP: disable only Flash. Use CyEEPROM_Stop() to stop EEPROM.
  93          *
  94          * Parameters:
  95          *  None
  96          *
  97          * Return:
  98          *  None
  99          *
 100          * Side Effects:
 101          *  This setting is ignored as long as the CPU is currently running.  This will
 102          *  only take effect when the CPU is later disabled.
 103          *
 104          *******************************************************************************/
 105          void CyFlash_Stop(void) 
 106          {
 107   1          #if (CY_PSOC5A)
              
                      /* Active Power Mode */
                      *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_EE_MASK));
              
                      /* Standby Power Mode */
                      *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_EE_MASK));
              
                  #endif  /* (CY_PSOC5A) */
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 3   

 116   1      
 117   1          #if (CY_PSOC3 || CY_PSOC5LP)
 118   1      
 119   1              /* Active Power Mode */
 120   1              *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
 121   1      
 122   1              /* Standby Power Mode */
 123   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
 124   1      
 125   1          #endif  /* (CY_PSOC3 || CY_PSOC5LP) */
 126   1      }
 127          
 128          
 129          /*******************************************************************************
 130          * Function Name: CySetTempInt
 131          ********************************************************************************
 132          *
 133          * Summary:
 134          *  Sends a command to the SPC to read the die temperature. Sets a global value
 135          *  used by the Write functions. This function must be called once before
 136          *  executing a series of Flash writing functions.
 137          *
 138          * Parameters:
 139          *  None
 140          *
 141          * Return:
 142          *  status:
 143          *   CYRET_SUCCESS - if successful
 144          *   CYRET_LOCKED  - if Flash writing already in use
 145          *   CYRET_UNKNOWN - if there was an SPC error
 146          *
 147          *******************************************************************************/
 148          static cystatus CySetTempInt(void) 
 149          {
 150   1          cystatus status;
 151   1      
 152   1          /* Make sure SPC is powered */
 153   1          CySpcStart();
 154   1      
 155   1          /* Plan for failure. */
 156   1          status = CYRET_UNKNOWN;
 157   1      
 158   1          if(CySpcLock() == CYRET_SUCCESS)
 159   1          {
 160   2              /* Write the command. */
 161   2              #if(CY_PSOC5A)
                          if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES, CY_TEMP_TIMER_PERIOD, CY_TEMP_CLK_
             -DIV_SELECT))
                      #else
 164   2                  if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 165   2              #endif  /* (CY_PSOC5A) */
 166   2                  {
 167   3                      do
 168   3                      {
 169   4                          if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DAT
             -A_SIZE)
 170   4                          {
 171   5                              status = CYRET_SUCCESS;
 172   5      
 173   5                              while(CY_SPC_BUSY)
 174   5                              {
 175   6                                  /* Spin until idle. */
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 4   

 176   6                                  CyDelayUs(1u);
 177   6                              }
 178   5                              break;
 179   5                          }
 180   4      
 181   4                      } while(CY_SPC_BUSY);
 182   3                  }
 183   2      
 184   2                  CySpcUnlock();
 185   2          }
 186   1          else
 187   1          {
 188   2              status = CYRET_LOCKED;
 189   2          }
 190   1      
 191   1          return (status);
 192   1      }
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: CySetTemp
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *  This is a wraparound for CySetTempInt(). It is used to return second
 201          *  successful read of temperature value.
 202          *
 203          * Parameters:
 204          *  None
 205          *
 206          * Return:
 207          *  status:
 208          *   CYRET_SUCCESS if successful.
 209          *   CYRET_LOCKED  if Flash writing already in use
 210          *   CYRET_UNKNOWN if there was an SPC error.
 211          *
 212          *  uint8 dieTemperature[2]:
 213          *   Holds die temperature for the flash writting algorithm. The first byte is
 214          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 215          *   the magnitude.
 216          *
 217          *******************************************************************************/
 218          cystatus CySetTemp(void) 
 219          {
 220   1          cystatus status = CySetTempInt();
 221   1      
 222   1          if(status == CYRET_SUCCESS)
 223   1          {
 224   2              status = CySetTempInt();
 225   2          }
 226   1      
 227   1          return (status);
 228   1      }
 229          
 230          
 231          /*******************************************************************************
 232          * Function Name: CySetFlashEEBuffer
 233          ********************************************************************************
 234          *
 235          * Summary:
 236          *  Sets the user supplied temporary buffer to store SPC data while performing
 237          *  flash and EEPROM commands. This buffer is only necessary when Flash ECC is
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 5   

 238          *  disabled.
 239          *
 240          * Parameters:
 241          *  buffer:
 242          *   Address of block of memory to store temporary memory. The size of the block
 243          *   of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 244          *
 245          * Return:
 246          *  status:
 247          *   CYRET_SUCCESS if successful.
 248          *   CYRET_BAD_PARAM if the buffer is NULL
 249          *
 250          *******************************************************************************/
 251          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 252          {
 253   1          cystatus status = CYRET_SUCCESS;
 254   1      
 255   1          CySpcStart();
 256   1      
 257   1          #if(CYDEV_ECC_ENABLE == 0)
 258   1      
 259   1              if(NULL == buffer)
 260   1              {
 261   2                  status = CYRET_BAD_PARAM;
 262   2              }
 263   1              else if(CySpcLock() != CYRET_SUCCESS)
 264   1              {
 265   2                  status = CYRET_LOCKED;
 266   2              }
 267   1              else
 268   1              {
 269   2                  rowBuffer = buffer;
 270   2                  CySpcUnlock();
 271   2              }
 272   1      
 273   1          #else
              
                      /* To supress the warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 279   1      
 280   1          return(status);
 281   1      }
 282          
 283          
 284          #if(CYDEV_ECC_ENABLE == 1)
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowData
                  ********************************************************************************
                  *
                  * Summary:
                  *   Sends a command to the SPC to load and program a row of data in flash.
                  *
                  * Parameters:
                  *  arrayID:
                  *   ID of the array to write.
                  *  rowAddress:
                  *   rowAddress of flash row to program.
                  *  rowData:
                  *   Array of bytes to write.
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 6   

                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
                  {
                      uint16 rowSize;
                      cystatus status;
              
                      rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
                      status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
              
                      return(status);
                  }
              
              #else
 321          
 322              /*******************************************************************************
 323              * Function Name: CyWriteRowData
 324              ********************************************************************************
 325              *
 326              * Summary:
 327              *   Sends a command to the SPC to load and program a row of data in flash.
 328              *
 329              * Parameters:
 330              *  arrayID      : ID of the array to write.
 331              *  rowAddress   : rowAddress of flash row to program.
 332              *  rowData      : Array of bytes to write.
 333              *
 334              * Return:
 335              *  status:
 336              *   CYRET_SUCCESS if successful.
 337              *   CYRET_LOCKED if the SPC is already in use.
 338              *   CYRET_CANCELED if command not accepted
 339              *   CYRET_UNKNOWN if there was an SPC error.
 340              *
 341              *******************************************************************************/
 342              cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 343              {
 344   1              uint8 i;
 345   1              uint32 offset;
 346   1              uint16 rowSize;
 347   1              cystatus status;
 348   1      
 349   1              rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? \
 350   1                          CYDEV_EEPROM_ROW_SIZE : \
 351   1                          (CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE);
 352   1      
 353   1              if(rowSize != CYDEV_EEPROM_ROW_SIZE)
 354   1              {
 355   2                  /* Save the ECC area. */
 356   2                  offset = CYDEV_ECC_BASE + ((uint32) arrayId * CYDEV_ECC_SECTOR_SIZE) +
 357   2                          ((uint32) rowAddress * CYDEV_ECC_ROW_SIZE);
 358   2      
 359   2                  for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 360   2                  {
 361   3                      *(rowBuffer + CYDEV_FLS_ROW_SIZE + i) = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 7   

 362   3                  }
 363   2              }
 364   1      
 365   1              /* Copy the rowdata to the temporary buffer. */
 366   1              #if(CY_PSOC3)
 367   1                  (void) memcpy((void *) rowBuffer, (const void *) rowData, (int16) CYDEV_FLS_ROW_SIZE);
 368   1              #else
                          (void) memcpy((void *) rowBuffer, (const void *) rowData, CYDEV_FLS_ROW_SIZE);
                      #endif  /* (CY_PSOC3) */
 371   1      
 372   1              status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, rowSize);
 373   1      
 374   1              return(status);
 375   1          }
 376          
 377          #endif /* (CYDEV_ECC_ENABLE == 0u) */
 378          
 379          
 380          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
 381          
 382              /*******************************************************************************
 383              * Function Name: CyWriteRowConfig
 384              ********************************************************************************
 385              *
 386              * Summary:
 387              *  Sends a command to the SPC to load and program a row of config data in flash.
 388              *  This function is only valid for Flash array IDs (not for EEPROM).
 389              *
 390              * Parameters:
 391              *  arrayId:
 392              *   ID of the array to write
 393              *  rowAddress:
 394              *   Address of the sector to erase.
 395              *  rowECC:
 396              *   Array of bytes to write.
 397              *
 398              * Return:
 399              *  status:
 400              *   CYRET_SUCCESS if successful.
 401              *   CYRET_LOCKED if the SPC is already in use.
 402              *   CYRET_CANCELED if command not accepted
 403              *   CYRET_UNKNOWN if there was an SPC error.
 404              *
 405              *******************************************************************************/
 406              cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, uint8 * rowECC) 
 407              {
 408   1              uint32 offset;
 409   1              uint16 i;
 410   1              cystatus status;
 411   1      
 412   1              /* Read the existing flash data. */
 413   1              offset = CYDEV_FLS_BASE + ((uint32) arrayId * CYDEV_FLS_SECTOR_SIZE) +
 414   1                  ((uint32) rowAddress * CYDEV_FLS_ROW_SIZE);
 415   1      
 416   1              for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
 417   1              {
 418   2                  rowBuffer[i] = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 419   2              }
 420   1      
 421   1              #if(CY_PSOC3)
 422   1                  (void) memcpy((void *) &rowBuffer[CYDEV_FLS_ROW_SIZE], (void *) rowECC, (int16) CYDEV_ECC_ROW_
             -SIZE);
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 8   

 423   1              #else
                          (void) memcpy((void *) &rowBuffer[CYDEV_FLS_ROW_SIZE], (void *) rowECC, CYDEV_ECC_ROW_SIZE);
                      #endif  /* (CY_PSOC3) */
 426   1      
 427   1              status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE);
 428   1      
 429   1              return (status);
 430   1          }
 431          
 432          #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 433          
 434          
 435          
 436          /*******************************************************************************
 437          * Function Name: CyWriteRowFull
 438          ********************************************************************************
 439          * Summary:
 440          *   Sends a command to the SPC to load and program a row of data in flash.
 441          *   rowData array is expected to contain Flash and ECC data if needed.
 442          *
 443          * Parameters:
 444          *       arrayId: FLASH or EEPROM array id.
 445          *       rowData: pointer to a row of data to write.
 446          *       rowNumber: Zero based number of the row.
 447          *       rowSize: Size of the row.
 448          *
 449          * Return:
 450          *   CYRET_SUCCESS if successful.
 451          *   CYRET_LOCKED if the SPC is already in use.
 452          *   CYRET_CANCELED if command not accepted
 453          *   CYRET_UNKNOWN if there was an SPC error.
 454          *
 455          *******************************************************************************/
 456          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 457                  
 458          {
 459   1          cystatus status;
 460   1      
 461   1          if(CySpcLock() == CYRET_SUCCESS)
 462   1          {
 463   2              /* Load row data into SPC internal latch */
 464   2              status = CySpcLoadRow(arrayId, rowData, rowSize);
 465   2      
 466   2              if(CYRET_STARTED == status)
 467   2              {
 468   3                  while(CY_SPC_BUSY)
 469   3                  {
 470   4                      /* Wait for SPC to finish and get SPC status */
 471   4                      CyDelayUs(1u);
 472   4                  }
 473   3      
 474   3                  /* Hide SPC status */
 475   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 476   3                  {
 477   4                      status = CYRET_SUCCESS;
 478   4                  }
 479   3                  else
 480   3                  {
 481   4                      status = CYRET_UNKNOWN;
 482   4                  }
 483   3      
 484   3                  if(CYRET_SUCCESS == status)
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 9   

 485   3                  {
 486   4                      /* Erase and program flash with the data from SPC interval latch */
 487   4                      status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 488   4      
 489   4                      if(CYRET_STARTED == status)
 490   4                      {
 491   5                          while(CY_SPC_BUSY)
 492   5                          {
 493   6                              /* Wait for SPC to finish and get SPC status */
 494   6                              CyDelayUs(1u);
 495   6                          }
 496   5      
 497   5                          /* Hide SPC status */
 498   5                          if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 499   5                          {
 500   6                              status = CYRET_SUCCESS;
 501   6                          }
 502   5                          else
 503   5                          {
 504   6                              status = CYRET_UNKNOWN;
 505   6                          }
 506   5                      }
 507   4                  }
 508   3      
 509   3              }
 510   2      
 511   2              CySpcUnlock();
 512   2          }
 513   1          else
 514   1          {
 515   2              status = CYRET_LOCKED;
 516   2          }
 517   1      
 518   1          return(status);
 519   1      }
 520          
 521          
 522          /*******************************************************************************
 523          * Function Name: CyFlash_SetWaitCycles
 524          ********************************************************************************
 525          *
 526          * Summary:
 527          *  Sets the number of clock cycles the cache will wait before it samples data
 528          *  coming back from Flash. This function must be called before increasing CPU
 529          *  clock frequency. It can optionally be called after lowering CPU clock
 530          *  frequency in order to improve CPU performance.
 531          *
 532          * Parameters:
 533          *  uint8 freq:
 534          *   Frequency of operation in Megahertz.
 535          *
 536          * Return:
 537          *  None
 538          *
 539          *******************************************************************************/
 540          void CyFlash_SetWaitCycles(uint8 freq) 
 541          {
 542   1          uint8 interruptState;
 543   1      
 544   1          /* Save current global interrupt enable and disable it */
 545   1          interruptState = CyEnterCriticalSection();
 546   1      
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 10  

 547   1          /***************************************************************************
 548   1          * The number of clock cycles the cache will wait before it samples data
 549   1          * coming back from Flash must be equal or greater to to the CPU frequency
 550   1          * outlined in clock cycles.
 551   1          ***************************************************************************/
 552   1      
 553   1          #if (CY_PSOC3)
 554   1      
 555   1              if (freq <= 22u)
 556   1              {
 557   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 558   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_22MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 559   2              }
 560   1              else if (freq <= 44u)
 561   1              {
 562   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 563   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 564   2              }
 565   1              else
 566   1              {
 567   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 568   2                      ((uint8)(CY_FLASH_GREATER_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 569   2              }
 570   1      
 571   1          #endif  /* (CY_PSOC3) */
 572   1      
 573   1      
 574   1          #if (CY_PSOC5A)
              
                      if (freq <= 16u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_16MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 33u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_33MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 50u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_50MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_GREATER_51MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
              
                  #endif  /* (CY_PSOC5A) */
 598   1      
 599   1      
 600   1          #if (CY_PSOC5LP)
              
                      if (freq <= 16u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_16MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 33u)
                      {
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 11  

                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_33MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 50u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_50MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_GREATER_51MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
              
                  #endif  /* (CY_PSOC5LP) */
 624   1      
 625   1          /* Restore global interrupt enable state */
 626   1          CyExitCriticalSection(interruptState);
 627   1      }
 628          
 629          
 630          #if (CY_PSOC3 || CY_PSOC5LP)
 631          
 632              /*******************************************************************************
 633              * Function Name: CyEEPROM_Start
 634              ********************************************************************************
 635              *
 636              * Summary:
 637              *  Enable the EEPROM.
 638              *
 639              * Parameters:
 640              *  None
 641              *
 642              * Return:
 643              *  None
 644              *
 645              *******************************************************************************/
 646              void CyEEPROM_Start(void) 
 647              {
 648   1              /* Active Power Mode */
 649   1              *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 650   1      
 651   1              /* Standby Power Mode */
 652   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 653   1          }
 654          
 655          
 656              /*******************************************************************************
 657              * Function Name: CyEEPROM_Stop
 658              ********************************************************************************
 659              *
 660              * Summary:
 661              *  Disable the EEPROM.
 662              *
 663              * Parameters:
 664              *  None
 665              *
 666              * Return:
 667              *  None
 668              *
 669              *******************************************************************************/
 670              void CyEEPROM_Stop (void) 
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 12  

 671              {
 672   1              /* Active Power Mode */
 673   1              *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 674   1      
 675   1              /* Standby Power Mode */
 676   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 677   1          }
 678          
 679          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 680          
 681          
 682          /*******************************************************************************
 683          * Function Name: CyEEPROM_ReadReserve
 684          ********************************************************************************
 685          *
 686          * Summary:
 687          *  Request access to the EEPROM for reading and wait until access is available.
 688          *
 689          * Parameters:
 690          *  None
 691          *
 692          * Return:
 693          *  None
 694          *
 695          *******************************************************************************/
 696          void CyEEPROM_ReadReserve(void) 
 697          {
 698   1          /* Make a request for PHUB to have access */
 699   1          *CY_FLASH_EE_SCR_PTR |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 700   1      
 701   1          while (0u == (*CY_FLASH_EE_SCR_PTR & CY_FLASH_EE_SCR_AHB_EE_ACK))
 702   1          {
 703   2              /* Wait for acknowledgement from PHUB */
 704   2          }
 705   1      }
 706          
 707          
 708          /*******************************************************************************
 709          * Function Name: CyEEPROM_ReadRelease
 710          ********************************************************************************
 711          *
 712          * Summary:
 713          *  Release the read reservation of the EEPROM.
 714          *
 715          * Parameters:
 716          *  None
 717          *
 718          * Return:
 719          *  None
 720          *
 721          *******************************************************************************/
 722          void CyEEPROM_ReadRelease(void) 
 723          {
 724   1          *CY_FLASH_EE_SCR_PTR |= 0x00u;
 725   1      }
 726          
 727          
 728          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1004    ----
C51 COMPILER V9.03   CYFLASH                                                               03/09/2016 17:02:53 PAGE 13  

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
