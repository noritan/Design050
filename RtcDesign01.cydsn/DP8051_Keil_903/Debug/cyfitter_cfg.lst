C51 COMPILER V9.03   CYFITTER_CFG                                                          03/09/2016 17:02:54 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\cyfitter_cfg.lst) DB NOI
                    -P OT(5,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.2 Component Pack 6
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          /* Clock startup error codes                                                   */
  25          #define CYCLOCKSTART_NO_ERROR    0u
  26          #define CYCLOCKSTART_XTAL_ERROR  1u
  27          #define CYCLOCKSTART_32KHZ_ERROR 2u
  28          #define CYCLOCKSTART_PLL_ERROR   3u
  29          
  30          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
              * Function Name: CyClockStartupError
              ********************************************************************************
              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode);
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode)
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/09/2016 17:02:54 PAGE 2   

              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  71          
  72          
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYPACKED
  75                  #define CYALIGNED
  76                  
  77                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  78          
  79          
  80          
  81                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  82                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  83                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  84          #else
                      #error Unsupported toolchain
              #endif
  87          
  88          
  89          /*******************************************************************************
  90          * Function Name: ClockSetup
  91          ********************************************************************************
  92          *
  93          * Summary:
  94          *  Performs the initialization of all of the clocks in the device based on the
  95          *  settings in the Clock tab of the DWR.  This includes enabling the requested
  96          *  clocks and setting the necessary dividers to produce the desired frequency. 
  97          *
  98          * Parameters:
  99          *  void
 100          *
 101          * Return:
 102          *  void
 103          *
 104          *******************************************************************************/
 105          static void ClockSetup(void);
 106          static void ClockSetup(void)
 107          {
 108   1              uint8 x32TrHold;
 109   1              uint32 timeout;
 110   1              uint8 pllLock;
 111   1      
 112   1              x32TrHold = CY_GET_REG8((void CYXDATA *)CYREG_X32_TR);
 113   1      
 114   1              /* Configure ILO based on settings from Clock DWR */
 115   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/09/2016 17:02:54 PAGE 3   

 116   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 117   1      
 118   1              /* Configure XTAL 32kHz based on settings from Clock DWR */
 119   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_X32_TST), 0xF3u);
 120   1              CY_SET_REG8((void CYXDATA *)(CYREG_X32_TR), 0x03u);
 121   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_X32_CFG), 0x84u);
 122   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_X32_CR), 0x05u);
 123   1              /* Wait up to 1000000us for the XTAL 32kHz to lock */
 124   1              for (timeout = 1000000u / 10u; (timeout > 0u) && ((CY_GET_REG8((void CYXDATA *)CYREG_SLOWCLK_X32_CR) & 0x
             -20u) == 0u); timeout--) { 
 125   2                      
 126   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 127   2              }
 128   1              CY_SET_REG8((void CYXDATA *)(CYREG_X32_TR), (x32TrHold));
 129   1      
 130   1              /* Configure IMO based on settings from Clock DWR */
 131   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x01u);
 132   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_6MHZ)));
 133   1      
 134   1              /* Configure PLL based on settings from Clock DWR */
 135   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0110u);
 136   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051u);
 137   1              /* Wait up to 250us for the PLL to lock */
 138   1              pllLock = 0u;
 139   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--) { 
 140   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 141   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 142   2              }
 143   1      
 144   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 145   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 147   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 148   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 149   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 150   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 151   1      }
 152          
 153          
 154          /* Analog API Functions */
 155          
 156          
 157          /*******************************************************************************
 158          * Function Name: AnalogSetDefault
 159          ********************************************************************************
 160          *
 161          * Summary:
 162          *  Sets up the analog portions of the chip to default values based on chip
 163          *  configuration options from the project.
 164          *
 165          * Parameters:
 166          *  void
 167          *
 168          * Return:
 169          *  void
 170          *
 171          *******************************************************************************/
 172          static void AnalogSetDefault(void);
 173          static void AnalogSetDefault(void)
 174          {
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/09/2016 17:02:54 PAGE 4   

 175   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 176   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 177   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT1, ((uint8)((uint8)bg_xover_inl_trim >> 4)) & 0x0Fu);
 178   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 179   1      }
 180          
 181          
 182          /*******************************************************************************
 183          * Function Name: SetAnalogRoutingPumps
 184          ********************************************************************************
 185          *
 186          * Summary:
 187          * Enables or disables the analog pumps feeding analog routing switches.
 188          * Intended to be called at startup, based on the Vdda system configuration;
 189          * may be called during operation when the user informs us that the Vdda voltage
 190          * crossed the pump threshold.
 191          *
 192          * Parameters:
 193          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 194          *
 195          * Return:
 196          *  void
 197          *
 198          *******************************************************************************/
 199          void SetAnalogRoutingPumps(uint8 enabled)
 200          {
 201   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 202   1              if (enabled != 0u)
 203   1              {
 204   2                      regValue |= 0x00u;
 205   2              }
 206   1              else
 207   1              {
 208   2                      regValue &= (uint8)~0x00u;
 209   2              }
 210   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 211   1      }
 212          
 213          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 214          
 215          
 216          /*******************************************************************************
 217          * Function Name: cyfitter_cfg
 218          ********************************************************************************
 219          * Summary:
 220          *  This function is called by the start-up code for the selected device. It
 221          *  performs all of the necessary device configuration based on the design
 222          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 223          *  as Clocks and Pins as well as any component configuration that is necessary.
 224          *
 225          * Parameters:  
 226          *   void
 227          *
 228          * Return:
 229          *   void
 230          *
 231          *******************************************************************************/
 232          
 233          void cyfitter_cfg(void)
 234          {
 235   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 236   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/09/2016 17:02:54 PAGE 5   

 237   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 238   1      
 239   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 240   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 241   1      
 242   1              {
 243   2                      static const uint8 CYCODE cfg_byte_table[] = {
 244   2                              0x06u,
 245   2                              0x01u, 0x40u, 0x02u, /* Base address 0x014000 */
 246   2                              /* CYDEV_UCFG_DSI0_BASE */
 247   2                              0x33u, 0x80u, 
 248   2                              /* CYDEV_UCFG_DSI0_BASE + 0x00000080u */
 249   2                              0xCCu, 0x10u, 
 250   2                              0x01u, 0x41u, 0x01u, /* Base address 0x014100 */
 251   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 252   2                              0xA7u, 0x80u, 
 253   2                              0x01u, 0x42u, 0x01u, /* Base address 0x014200 */
 254   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 255   2                              0xA7u, 0x80u, 
 256   2                              0x01u, 0x43u, 0x03u, /* Base address 0x014300 */
 257   2                              /* CYDEV_UCFG_DSI3_BASE */
 258   2                              0x2Fu, 0x04u, 
 259   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 260   2                              0xA7u, 0x80u, 0xCAu, 0x20u, 
 261   2                              0x01u, 0x48u, 0x01u, /* Base address 0x014800 */
 262   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 263   2                              0xAFu, 0x84u, 
 264   2                              0x01u, 0x51u, 0x01u, /* Base address 0x015100 */
 265   2                              /* CYREG_IDMUX_IRQ_CTL0 */
 266   2                              0x00u, 0x02u, 
 267   2                      };
 268   2                      /* BYTES: 37 */
 269   2      
 270   2      
 271   2                      typedef struct {
 272   2                              void CYFAR *address;
 273   2                              uint16 size;
 274   2                      } CYPACKED cfg_memset_t;
 275   2      
 276   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 277   2                              /* address, size */
 278   2                              {(void CYFAR *)(CYREG_PRT0_DR), 32u},
 279   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 280   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 281   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 282   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 283   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 284   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 285   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 286   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 287   2                      };
 288   2      
 289   2                      uint8 CYDATA i;
 290   2      
 291   2                      /* Zero out critical memory blocks before beginning configuration */
 292   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 293   2                      {
 294   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 295   3                              CYMEMZERO(ms->address, ms->size);
 296   3                      }
 297   2      
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/09/2016 17:02:54 PAGE 6   

 298   2                      cfg_write_bytes_code(cfg_byte_table);
 299   2      
 300   2                      /* Enable digital routing */
 301   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 302   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 303   2      
 304   2                      /* Enable UDB array */
 305   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 306   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 307   2              }
 308   1      
 309   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 310   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 311   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 312   1      
 313   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 314   1              CY_SET_REG8((void CYXDATA *)CYDEV_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYDEV_BOOST_CR2) | 0x08u));
 315   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 316   1              {
 317   2                      CY_SET_REG8((void CYXDATA *)CYDEV_MFGCFG_PWRSYS_WAKE_TR2, 0x3Au);
 318   2              }
 319   1      
 320   1      
 321   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 322   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 323   1              /* Setup clocks based on selections from Clock DWR */
 324   1              ClockSetup();
 325   1      
 326   1              /* Perform basic analog initialization to defaults */
 327   1              AnalogSetDefault();
 328   1      
 329   1              /* Configure alternate active mode */
 330   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 331   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 332   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    578    ----
   CONSTANT SIZE    =     90    ----
   XDATA SIZE       =   ----       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
